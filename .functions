#!/bin/bash
# Title:        bash_functions
# Description:  bash functions that use variables/have arg error checking
# Author:       Spencer Sutterlin
# Email:        spencerucla@gmail.com

# Mine: print my custom bash aliases and functions
mine() {
  local a=$(alias | awk '{print $2}' | awk -F'=' '{print $1}')
  local f=$(declare -F | grep -v " _" | awk '{ print $3 }')
  echo -e "${a}\n${f}" | sort | column
  echo
  echo "Try 'type <command>' for more information."
}

# Mk+ch dir: "mcd <dir>"
mcd() {
  if [ -z "$1" ]; then
    echo "ERROR: directory name arg required"
  else
    mkdir -p $1 && cd $1
  fi
}

# Vim+find: "v <partial-filename> [c|h|java]" doesn't need path prefix
v() {
  if [ -e $1 ]; then
    vim $1
  else
    local file=$(find . -name "$1*$2")
    local count=$(echo -n "$file" | grep -c "^")
    if [ "$count" -eq "1" ]; then
      vim $file
    else
      echo "$count file(s) found"
      echo "$file"
    fi
  fi
}

findany() {
  find . -iname '*'"$*"'*'
}

findquiet() {
  find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# John Wick: "wick <name>"
# Kill any and all processes containing <name>
wick() {
  ps aux | grep $1 | grep -v grep | awk '{print $2}' | xargs kill -9
}

# Liam Neeson (Taken): "liam <file>"
# Kill any and all processes currently using <file>
liam() {
  lsof $1 | grep -v "COMMAND" | awk '{ print $2 }' | xargs kill -9
}

# Tre: "tree" with hidden files and color enabled, ignoring the `.git`
# directory, listing directories first. The output gets piped into `less` with
# options to preserve color and line numbers, unless the output is small enough
# for one screen.
tre() {
  tree -aCsh -I '.git' --dirsfirst "$@" | less -FRNX
}

# Server: start an HTTP server from a directory, optionally specifying the port
server() {
  local port="${1:-8000}"
  # Redefine the default Content-Type to text/plain instead of
  # application/octet-stream allowing "unknown" files to be viewable in-browser
  # as text instead of being downloaded, which makes me happy
  # And serve everything as UTF-8 (although not technically correct, this makes
  # funky characters in binary files render correctly doesn't break anything)
  python -c $'
import SimpleHTTPServer
map = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map
map[""] = "text/plain"
for key, value in map.items():
    map[key] = value + ";charset=UTF-8"
SimpleHTTPServer.test()
' "$port"
}

# TODO: move to gitconfig alias
# Git Push: "gp"
# Push to gerrit to correct branch, whatever default remote branch is
# Requires: must be run from inside existing repo
gp() {
  BRANCH=`repo forall . -c 'echo $REPO_RREV'`
  if [ -z "$BRANCH" ]; then
    echo "ERROR: branch name failed to parse"
  else
    git push origin HEAD:refs/for/$BRANCH
  fi
}

# Build setup: "settop"
# Requires: script must be run from top of code tree
settop() {
  export TOP=$(pwd)
  . build/envsetup.sh
  setpaths
}

# Find code top: "code_top"
# If you keep all your code trees in any of the directories below (CODE_LOC#)
# this will return 0 and print $TOP of the code tree you're in
# TODO: use loop and $PWD
code_top() {
  CODE_LOC1=/home/ssutterlin/code/
  CODE_LOC2=/home/ssutterlin/trees/
  CODE_LOC3=/trees/
  CODE_LOC4=/build/ssutterlin/code/
  if [[ $PWD == "$CODE_LOC1"* ]]; then
    TREE=`echo ${PWD:${#CODE_LOC1}} | cut -d / -f 1`
    echo "$CODE_LOC1$TREE"
    return 0
  elif [[ $PWD == "$CODE_LOC2"* ]]; then
    TREE=`echo ${PWD:${#CODE_LOC2}} | cut -d / -f 1`
    echo "$CODE_LOC2$TREE"
    return 0
  elif [[ $PWD == "$CODE_LOC3"* ]]; then
    TREE=`echo ${PWD:${#CODE_LOC3}} | cut -d / -f 1`
    echo "$CODE_LOC3$TREE"
    return 0
  elif [[ $PWD == "$CODE_LOC4"* ]]; then
    TREE=`echo ${PWD:${#CODE_LOC4}} | cut -d / -f 1`
    echo "$CODE_LOC4$TREE"
    return 0
  else
    return 1
  fi
}

# Top cd: "tcd <dir>"
# Jump to dir within code tree
tcd() {
  CODE_TOP=`code_top`
  if [ $? -eq 0 ]; then
    cd $CODE_TOP/$1
  else
    echo "ERROR: not in a code tree"
    return 1
  fi
}

# adb remount + disable-verity + reboot, k?
# Everything needed in order to adb remount
aardvark() {
  adb root
  adb disable-verity
  adb reboot
}

# install_busybox on android
install_busybox() {
  adb push ~/tools/android-bin/busybox /system/bin
  adb shell busybox --install /system/bin
}
